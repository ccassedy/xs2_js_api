var xs2_api = {
    socket: null,
    // AuthAPI Methods
    SetDeviceKey: function (DeviceKey, OS, Brand, Model) { return this.socket.try_invoke('SetDeviceKey', DeviceKey, OS, Brand, Model); },
    Login: function (Email, Password) { return this.socket.try_invoke('Login', Email, Password); },
    Signup: function (Email, Password, AgreeToTermsOfService, CaptchaToken) { return this.socket.try_invoke('Signup', Email, Password, AgreeToTermsOfService, CaptchaToken); },
    SignupCustomer: function (Email, Password, AgreeToTermsOfService, CaptchaToken, ReferringCustomerID) { return this.socket.try_invoke('SignupCustomer', Email, Password, AgreeToTermsOfService, CaptchaToken, ReferringCustomerID); },
    ResendEmailConfirmation: function () { return this.socket.try_invoke('ResendEmailConfirmation'); },
    ConfirmEmail: function (CustomerID, Code) { return this.socket.try_invoke('ConfirmEmail', CustomerID, Code); },
    SendPhoneConfirmation: function (Country, PhoneNumber) { return this.socket.try_invoke('SendPhoneConfirmation', Country, PhoneNumber); },
    ConfirmPhone: function (Code) { return this.socket.try_invoke('ConfirmPhone', Code); },
    ForgotPassword: function (Email) { return this.socket.try_invoke('ForgotPassword', Email); },
    ResetPassword: function (CustomerID, Code, NewPassword) { return this.socket.try_invoke('ResetPassword', CustomerID, Code, NewPassword); },
    ChangePassword: function (Password, NewPassword) { return this.socket.try_invoke('ChangePassword', Password, NewPassword); },
    Logout: function () { return this.socket.try_invoke('Logout'); },
    SetDeviceName: function (DeviceName) { return this.socket.try_invoke('SetDeviceName', DeviceName); },
    AuthoriseCurrentDevice: function (DeviceName) { return this.socket.try_invoke('AuthoriseCurrentDevice', DeviceName); },
    AuthoriseDevice: function (DeviceID) { return this.socket.try_invoke('AuthoriseDevice', DeviceID); },
    RemoveDevice: function (DeviceID) { return this.socket.try_invoke('RemoveDevice', DeviceID); },

    // TradeAPI Methods
    PlaceBuyOrder: function (Market, Price, Amount) { return this.socket.try_invoke('PlaceBuyOrder', Market, Price, Amount); },
    PlaceSellOrder: function (Market, Price, Amount) { return this.socket.try_invoke('PlaceSellOrder', Market, Price, Amount); },
    CancelBuyOrder: function (OrderID) { return this.socket.try_invoke('CancelBuyOrder', OrderID); },
    CancelSellOrder: function (OrderID) { return this.socket.try_invoke('CancelSellOrder', OrderID); },
    CancelAllOrders: function () { return this.socket.try_invoke('CancelAllOrders'); },
    GetWalletAddress: function (Coin) { return this.socket.try_invoke('GetWalletAddress', Coin); },
    RequestWithdrawal: function (Coin, Amount, ToAddress, ToMemo, Note) { return this.socket.try_invoke('RequestWithdrawal', Coin, Amount, ToAddress, ToMemo, Note); },
    GetOrders: function (CreatedFrom, CreatedTo, Market, OrderType, OrderStatus) { return this.socket.try_invoke('GetOrders', CreatedFrom, CreatedTo, Market, OrderType, OrderStatus); },
    GetTrades: function (CreatedFrom, CreatedTo, Market, TradeType) { return this.socket.try_invoke('GetTrades', CreatedFrom, CreatedTo, Market, TradeType); },
    GetTax: function () { return this.socket.try_invoke('GetTax'); },
    SubscribeToMarket: function (Market) { return this.socket.try_invoke('SubscribeToMarket', Market); },
    UnsubscribeFromMarket: function () { return this.socket.try_invoke('UnsubscribeFromMarket'); },
    SubscribeToChart: function (Market, Interval) { return this.socket.try_invoke('SubscribeToChart', Market, Interval); },
    GetMarketChartDataAfter: function (DateTime) { return this.socket.try_invoke('GetMarketChartDataAfter', DateTime); },
    GetMarketChartDataBefore: function (DateTime) { return this.socket.try_invoke('GetMarketChartDataBefore', DateTime); },
    UnsubscribeFromChart: function () { return this.socket.try_invoke('UnsubscribeFromChart'); },

    // InfoAPI Methods
    GetTransparencyInfo: function () { return this.socket.try_invoke('GetTransparencyInfo'); },
    GetCustomerCoins: function () { return this.socket.try_invoke('GetCustomerCoins'); },
    AddCoin: function (Symbol, Name) { return this.socket.try_invoke('AddCoin', Symbol, Name); },
    GetCoin: function (CoinID) { return this.socket.try_invoke('GetCoin', CoinID); },
    UpdateCoin: function (CoinID, Symbol, Name, AkaSymbol, TokenParentCoin, ContractPlatform, ContractAddress, CoinDecimals, Description, Utility, Industry, Privacy, Algorithm, Proof, Minable, Premined, IsFungible, MaxCoins, TotalCoins, TradeableCoins, IsCoin, IsToken, AllTimeHighBTC, AllTimeHighUSD, LogoSvg, ExplorerUrl, LegalStatus, LegalExplanation, Rights, Obligations, Restrictions, Features, ContractHasAdmin, ContractAdmins, AdminCapabilities, CanMintManually, CanMintByContract, ContractFeatures, ContractAudited, Location) { return this.socket.try_invoke('UpdateCoin', CoinID, Symbol, Name, AkaSymbol, TokenParentCoin, ContractPlatform, ContractAddress, CoinDecimals, Description, Utility, Industry, Privacy, Algorithm, Proof, Minable, Premined, IsFungible, MaxCoins, TotalCoins, TradeableCoins, IsCoin, IsToken, AllTimeHighBTC, AllTimeHighUSD, LogoSvg, ExplorerUrl, LegalStatus, LegalExplanation, Rights, Obligations, Restrictions, Features, ContractHasAdmin, ContractAdmins, AdminCapabilities, CanMintManually, CanMintByContract, ContractFeatures, ContractAudited, Location); },
    SaveCoinPerson: function (CoinID, PersonID, Name, OfficialName, CountryCode, Linkedin, Twitter, Facebook, Github, Blog, Email, Role, Bio, CommitmentPerWeek, CommitmentYears, ExperienceYears, Coins, WalletAddresses, EquityMainorg, EquityIPorg, Vesting, Sequence) { return this.socket.try_invoke('SaveCoinPerson', CoinID, PersonID, Name, OfficialName, CountryCode, Linkedin, Twitter, Facebook, Github, Blog, Email, Role, Bio, CommitmentPerWeek, CommitmentYears, ExperienceYears, Coins, WalletAddresses, EquityMainorg, EquityIPorg, Vesting, Sequence); },
    DeleteCoinPerson: function (CoinID, PersonID) { return this.socket.try_invoke('DeleteCoinPerson', CoinID, PersonID); },
    SaveCoinOrganization: function (CoinID, OrganizationID, Name, OfficialName, CompanyNumber, IsNonProfit, Address, CountryCode, Email, Telephone, Description, ProductRelation, HolderRights, HolderObligations, HolderRestrictions) { return this.socket.try_invoke('SaveCoinOrganization', CoinID, OrganizationID, Name, OfficialName, CompanyNumber, IsNonProfit, Address, CountryCode, Email, Telephone, Description, ProductRelation, HolderRights, HolderObligations, HolderRestrictions); },
    DeleteCoinOrganization: function (CoinID, OrganizationID) { return this.socket.try_invoke('DeleteCoinOrganization', CoinID, OrganizationID); },
    SaveCoinOrganizationAsset: function (CoinID, AssetID, OrganizationID, Currency, Amount, Vesting, Location, WalletAddresses) { return this.socket.try_invoke('SaveCoinOrganizationAsset', CoinID, AssetID, OrganizationID, Currency, Amount, Vesting, Location, WalletAddresses); },
    DeleteCoinOrganizationAsset: function (CoinID, AssetID) { return this.socket.try_invoke('DeleteCoinOrganizationAsset', CoinID, AssetID); },
    SaveCoinMintingEvent: function (CoinID, MintingEventID, Name, StartDate, EndDate, Quantity, Structure, Recipients, DistributionMethod, Restrictions) { return this.socket.try_invoke('SaveCoinMintingEvent', CoinID, MintingEventID, Name, StartDate, EndDate, Quantity, Structure, Recipients, DistributionMethod, Restrictions); },
    DeleteCoinMintingEvent: function (CoinID, MintingEventID) { return this.socket.try_invoke('DeleteCoinMintingEvent', CoinID, MintingEventID); },
    SaveCoinMintingEventProceeds: function (CoinID, MintingEventID, ProceedsID, Currency, Amount, Allocation, CoinOrganizationID) { return this.socket.try_invoke('SaveCoinMintingEventProceeds', CoinID, MintingEventID, ProceedsID, Currency, Amount, Allocation, CoinOrganizationID); },
    DeleteCoinMintingEventProceeds: function (CoinID, ProceedsID) { return this.socket.try_invoke('DeleteCoinMintingEventProceeds', CoinID, ProceedsID); },
    SaveCoinLink: function (CoinID, LinkID, URL, LinkTypeID) { return this.socket.try_invoke('SaveCoinLink', CoinID, LinkID, URL, LinkTypeID); },
    DeleteCoinLink: function (CoinID, LinkID) { return this.socket.try_invoke('DeleteCoinLink', CoinID, LinkID); },
    AddCoinACL: function (CoinID, SharedLinkCode) { return this.socket.try_invoke('AddCoinACL', CoinID, SharedLinkCode); },
    SaveCoinACL: function (CoinID, EditorCustomerID, Name, Role) { return this.socket.try_invoke('SaveCoinACL', CoinID, EditorCustomerID, Name, Role); },
    DeleteCoinACL: function (CoinID, EditorCustomerID) { return this.socket.try_invoke('DeleteCoinACL', CoinID, EditorCustomerID); },
};
